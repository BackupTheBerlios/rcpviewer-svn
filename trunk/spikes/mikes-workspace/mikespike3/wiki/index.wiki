1 Mike's Spike 3

This is a real spike - no more hand holding.  
Its aim is to provoke thought into the basic mechanism (I hesitate to call it architecture) for GUI generation within RcpViewer.
Principles are:
* KISS
* eat your own dog food
* extensibility
* principle of no surprises (for RCP developers anyway)
A lot more thought than code has gone into this spike...

~~Limitations~~
* Only thinking about presentation here - not any other functionality.
* Still not using EMF model as a distraction

~~Set Up~~
mikespike3 represents the core RcpViewer code as delieverd by us. It is based on the mikespike2 code with the following (initial) differences:
* packages have been juggled (I like juggling packages)
* 'God' singleton has been swapped for rather more tasteful 'Model'
* this deals with instances for the puposes of this spike, not types
* the model starts with simple bean classes holding random primitive values 
* the start-up view (ObjectListView) is now a list of all __instances__ within the model
* no tests - this is a real spike
mikespike3-acme represents a plugin developed by a third party extending RcpViewer.

A launch configuration for mikespike3 can be easily created using the 'Launch an Eclipse Application' option on the overview tab of the plugin editor.  Once you have run the vanilla options add the mikespike3-acme plugin for its extra goodies (such as they are).

~~ Design ~~
There is a single, final mikespike3.editors.Editor class.  All displayed editors within RcpViewer are instances of this class.  Why?  I feel tying in persistence / security / all other non-GUI functionality to the Eclipse platform will be non-trivial.  Even if all of these are implemented vai aspects  we will still have to tie them in with GUI - editor lifecycle, save option enablements etc. etc.  Having a base editor which we do not have to open up for subclassing will keep life simple.

So how are different GUI representations generated?  Via mikespike3.gui.IEditorContentBuilder.  This is an interface and an extension point.  The Editor's mikespike3.editors.EditorInput passes a builder of this type that is then called in the Editor's  createPartControl(...) method to generate the GUI.  The EditorInput is populated by whatever GUI mechanism the user is using to open an editor.  Here this is demonstrated by the two mikespike3.views.OpenAction's  actions.  These reference a singleton mikespike3.gui.EditorContentBuilderFactory for available options.  

Exactly what IEditorContentBuilder options are available are decided on a per class basis via the isApplicable() method on each interface.  The java implementation decides this rather than a configuration value to enable flexibility - in the longer term I reckon applicability should be done per instance rather than per type.  Plus having potentially complex logic rules in XML is daft.

Note that I follow the standard Eclipse approach of offering a default Editor for any particular type (dbl-click or 'open' menu option) or a list of other options via the 'open with' menu option.  Whatever option is selected becomes the default for that type).

All of this is to allow third parties to develop additional editor GUI representations for RcpViewer.  

However I propose that we develop just one.  This is mikespike3.gui.DefaultEditorContentBuilder which generates a form-based GUI for any type based on the model metadata.  (Currently the implementation does the basic reflection necessary but of course this will comes from Dan's RCP model).

Developing only a single content builder is not as limited as it sounds. It uses the Composite patern to build up the GUI field-by-field.  The GUI for each individual field is then generated via a mikespike3.gui.IFieldBuilder implementation.  This is also an extension point and implementation selection works in a similiar manner to IEditorContentBuilder - with two crucial differences:
* IFieldBuilder's are selected per instance, not per type;
* IEditorContentBuilder offer alternatives whilst a single IFieldBuilder  will be always be selected
Hence the FieldBuilderFactory runs through all implementations of the 'mikespike3.fieldbuilder' extension point until it hits the first that isApplicable().  If none are found it reverts to the DefaultFieldBuilder.  Note that the extension points are sorted so that more specialist ones are checked first.  What does 'more specialist' mean? - see ConfigElementSorter in the util package (this is an old implemenation that might be more elegantly done in Eclipse 3.x).

The purpose of the IFieldBuilder mechanism is to allow very different GUI's to be generated in the same editor.  Whilst the examples within this spike are trivial, in RcpViewer different IFieldBuilder's for linked objects based on their relationships will offer rich alternatives.  Or so I shall try to prove in the next spike.



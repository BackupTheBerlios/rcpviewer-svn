<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<beans>
	<description>
		Client-side components for the Essential Platform.
	</description>

	<bean id="app" 
		class="org.essentialplatform.louis.app.SecureApplication">
		<description>
			Main GUI application, implementing the Eclipse RCP IPlatformRunnable interface.
		</description>
		<property name="authenticationCommand" ref="loginWizardAuthenticationCommand" />
		<property name="display" ref="display"/>
	  	<property name="binding" ref="clientBinding"/>
	  	<property name="remoting" ref="clientRemoting"/>
	  	<property name="louisDefinition" ref="louis"></property>
	</bean>

	<bean id="bindingInstaller"
		class="org.essentialplatform.core.deployment.BindingInstaller">
		<description>
			Installs the supplied binding within thread local storage
		</description>
		<property name="binding" ref="clientBinding">
			<description>
				The binding to be installed.
			</description>
		</property>
	</bean>

	<bean id="clientBinding"
		class="org.essentialplatform.runtime.client.domain.bindings.RuntimeClientBinding">
		<property name="bundle" ref="domainBundle">
			<description>
				For class loading of adapter factories.
			</description>
		</property>
		<property name="primaryBuilder" ref="primaryBuilder">
			<description>
				The IDomainBuilder to delegate to when interacting with the
				domain objects.  In theory the domain plugin could redefine 
				the 'primaryBuilder' bean, though this will be rare.
			</description>
		</property>
	</bean>

	<bean id="louisBundle"
		class="org.essentialplatform.louis.app.springsupport.LouisBundleFactoryBean">
		<description>
			FactoryBean that provides access to the Louis Plugin's OSGi Bundle.
		</description>
	</bean>


	<bean id="domainBundle"
		class="org.essentialplatform.core.springsupport.ExtensionPointContributingBundleFactoryBean">
		<description>
			FactoryBean that provides access to a Bundle based on extension points that it contributes to.
			The Bootstrap injects the values prior to refreshing the ApplicationContext.
		</description>
		<property name="configurationElementId">
			<description>
				The Bootstrap injects the (id of the) configuration element to search for.  This is
				a constant.
			</description>
			<null/>
		</property>
		<property name="id">
			<description>
				The Bootstrap injects the value of the id attribute to check the contribution against.
				This will be the same as the id of the plugin itself (eg 'com.mycompany.demo').
			</description>
			<null/>
		</property>
		<property name="defaultBundle" ref="louisBundle">
			<description>
				A default value so that we can refresh the context the first time
				prior to programmatically setting the other properties (which then re-calculate
				the Bundle ready for refreshing the context second time).
			</description>
		</property>
	</bean>

	<bean id="domainRegistry"
		class="org.essentialplatform.runtime.shared.domain.SingleDomainRegistry">
		<description>
			FactoryBean that provides access to the Louis Plugin's OSGi Bundle.
		</description>
		<property name="domainDefinition" ref="louis">
			<description>
				The (single) domain whose classes are to be registered.
			</description>
		</property>
	</bean>

	<bean id="loginWizardAuthenticationCommand" 
		class="org.essentialplatform.louis.authentication.loginwizard.LoginWizardAuthenticationCommand">
		<property name="toolkit" ref="formToolkit" />
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="windowText" value="ACME Example Application"/>
		<property name="titleText" value="Please Sign In"/>
	</bean>

	<bean id="authenticationManager" 
		class="org.essentialplatform.services.authentication.noop.NoopAuthenticationManager">
	</bean>

	<bean id="formToolkit" class="net.sf.plugins.utils.ui.forms.DialogFormToolkit" singleton="false" >
		<constructor-arg ref="display" />
	</bean>

	<bean id="display" 
		class="org.essentialplatform.core.springsupport.DisplayFactoryBean" >
	</bean>

	<bean id="transactionManager"
		class="org.essentialplatform.runtime.client.transaction.TransactionManager" 
		factory-method="instance">
		<description>
			Creates transactions and maintains a list of all current transaction(s), 
			each with their own list of enlisted pojos.
		</description>
		<property name="remoting" ref="clientRemoting">
			<description>
				Used to send committed transactions to the back-end server to be applied 
				to the backend persistent object store.
			</description>
		</property>
	</bean>
	
	<bean id="clientRemoting"
		class="org.essentialplatform.runtime.client.remoting.ClientRemoting">
		<property name="marshalling" ref="xstreamMarshalling"/>
		<property name="packager" ref="standardPackager"/>
		<property name="transport" ref="activeMqTransport"></property>
	</bean>

	<bean id="standardPackager"
		class="org.essentialplatform.runtime.client.remoting.packaging.standard.StandardPackager">
	</bean>
	
	<bean id="xstreamMarshalling"
		class="org.essentialplatform.runtime.shared.remoting.marshalling.xstream.XStreamMarshalling"/>
	
	<bean id="activeMqTransport"
		class="org.essentialplatform.runtime.client.remoting.transport.activemq.ActiveMqTransport">
		<property name="brokerUrl" value="tcp://localhost:61616"/>
		<property name="destinationName" value="org.essentialplatform.test"/>
	</bean>

	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	
	<!--  overridden by domain plugin -->
	<bean id="domain" 
		class="org.essentialplatform.runtime.shared.domain.SpringConfiguredDomainDefinition">
		<description>
			Application programmer must define a 'domain' bean implementing IDomainDefinition.  
			It specifies the classes that make up the domain.
		</description>
	</bean>

	<!-- optionally overridden by domain plugin -->
	<bean id="louis" 
		class="org.essentialplatform.louis.domain.SpringConfiguredLouisDefinition">
		<description>
			Application programmer can optionally define a 'louis' bean implementing ILouisDefinition.  
			It optionally configures the UI with specific capabilities for the domain.  If not
			supplied, then this definition will be used.
		</description>
		<property name="domainDefinition" ref='domain'>
			<description>
				The domain to which these UI-specific capabilities refer.  The
				domain should be defined in 'spring-context-domain.xml', which
				will also be included in the context.
			</description>
		</property>
		<property name="secondaryBuilders">
			<description>
				Processing of any additional annotations specific to Louis.
			</description>
			<list>
				<ref local="louisProgModelRuntimeBuilder"/>
			</list>
		</property>
	</bean>
	
	<!-- optionally overridden by domain plugin (rare) -->
	<bean id="primaryBuilder" 
		class="org.essentialplatform.progmodel.essential.runtime.EssentialProgModelRuntimeBuilder">
		<description>
			Default definition of 'primaryBuilder', representing the programming
			model conventions under which the domain classes have been written.
			The domain plugin could in theory redefine this bean, though this
			will be rare.
		</description>
	</bean>

	<!-- optionally overridden by domain plugin (rare) -->
	<bean id="louisProgModelRuntimeBuilder" 
		class="org.essentialplatform.progmodel.louis.runtime.LouisProgModelRuntimeBuilder"/>



</beans>

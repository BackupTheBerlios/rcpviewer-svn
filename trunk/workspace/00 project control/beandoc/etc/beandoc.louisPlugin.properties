#input.files specified explicitly
#output.dir  specified explicitly

# you can have the XML parser not bother to validate the input files against
# the DTD if you so wish.  True by default.
processor.validateFiles=true

# proxy beans and their targets can be merged such that the target is 
# documented and graphed as an anonymous inner bean would be.  Logically
# a proxy and its target are one, but they may be separate in context files 
# so that, for example, unit tests can access the unwrapped target.  Specify
# a regex pattern for the proxy beans you wish to merge with the value of
# the map entry being the property name that the target is found under 
# (usually 'target').
#processor.mergeProxies[^myProxyBean$]=target
#processor.mergeProxies[.*ProxyFactoryBean]=target

# documentation title used in the HTML output
html.title=Essential Platform Runtime Client

# you can override the system default locale with your choice here
#i18n.locale=en_GB

# skin the output with your own CSS file if you don't like ours!  The 
# wheat.css is an included option that you can try.
html.cssUrl=wheat.css
#html.cssUrl=http://our.corporate.server/beandoc.css

# well known (Java system and SpringFramework) API locations are built in to 
# the tool.  Add your own here.  The following example will link a classname of 
# com.foo.bar.MyClass to http://your.local.server/apidoc/com/foo/bar/MyClass.html
# You can optionally override the inbuilt ones to if you have, for example, 
# locally installed copies of the javadoc.
#javadoc.locations[com.foo.bar]=http://your.local.server/apidoc/

# to get the graphing working, specify the location of your GraphViz dot 
# binary here
#compiler.dotExe=/usr/bin/dot
compiler.dotExe=C:/Program Files/ATT/GraphViz/bin/dot.exe

# change the default shape of the beans on the graph outputs.
#graphs.beanShape=box

# pretty up the graphs with some nice colours.  Override the built-ins or add 
# to them as required for your bean names or package names - uses standard
# Regex patterns
graphs.colourBeans[com\.foo\.bar.*]=#a090a0
graphs.colourBeans[^/OrderService.*]=#f0f080
graphs.colourBeans[.*Proxy$]=#badbad

# selectively ignore beans on graphing output.  All beans will still be 
# documented in HTML by default.  Uses standard Regex patterns.
graphs.ignoreBeans[0]=^org\.springframework.*Property.*Configurer
graphs.ignoreBeans[1]=.*MessageSource

# constrain certain beans to a single rank (row) on the graphs.  Use with care.
graphs.rankBeans[0]=.*DataSource
#graphs.rankBeans[1]=.*samples\..*\.dao\.ibatis.*

# change the graph types if needed (PNG is highly recommended if your viewer 
# supports it).
#graphs.outputType=png
#graphs.outputType=jpg
graphs.outputType=gif
#graphs.outputType=svg

# if skinning the output with CSS just doesn't cut it for you, feel free to 
# supply your own XSLT templates to any of the Transformer beans!
#htmlIndexTransformer.templateName=classpath:my/preferred/stylesheet.xsl

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<beans>
	<description>
		Server-side components for the Essential Platform.
	</description>

	<bean id="app" 
		class="org.essentialplatform.louis.app.SecureApplication">
		<description>
			Main GUI application, implementing the Eclipse RCP IPlatformRunnable interface.
		</description>
		<property name="authenticationCommand" ref="loginWizardAuthenticationCommand" />
		<property name="display" ref="display"/>
	  	<property name="binding" ref="clientBinding"/>
	  	<property name="remoting" ref="clientRemoting"/>
	  	<property name="louisDefinition" ref="louis"></property>
	</bean>
	
	<bean id="clientBinding"
		class="org.essentialplatform.runtime.client.domain.bindings.RuntimeClientBinding">
		<property name="primaryBuilder" ref="primaryBuilder">
			<description>
				The IDomainBuilder to delegate to when interacting with the
				domain objects.  In theory the domain plugin could redefine 
				the 'primaryBuilder' bean, though this will be rare.
			</description>
		</property>
	</bean>


	<bean id="loginWizardAuthenticationCommand" 
		class="org.essentialplatform.louis.authentication.loginwizard.LoginWizardAuthenticationCommand">
		<property name="toolkit" ref="formToolkit" />
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="windowText" value="ACME Example Application"/>
		<property name="titleText" value="Please Sign In"/>
	</bean>

	<bean id="authenticationManager" 
		class="org.essentialplatform.services.authentication.noop.NoopAuthenticationManager">
	</bean>

	<bean id="formToolkit" class="net.sf.plugins.utils.ui.forms.DialogFormToolkit" singleton="false" >
		<constructor-arg ref="display" />
	</bean>

	<bean id="display" 
		class="org.essentialplatform.louis.app.springsupport.DisplayFactoryBean" >
	</bean>

	<bean id="transactionManager"
		class="org.essentialplatform.runtime.client.transaction.TransactionManager" 
		factory-method="instance">
		<description>
			Creates transactions and maintains a list of all current transaction(s), 
			each with their own list of enlisted pojos.
		</description>
		<property name="remoting" ref="clientRemoting">
			<description>
				Used to send committed transactions to the back-end server to be applied 
				to the backend persistent object store.
			</description>
		</property>
	</bean>
	
	<bean id="clientRemoting"
		class="org.essentialplatform.runtime.client.remoting.ClientRemoting">
		<property name="marshalling" ref="xstreamMarshalling"/>
		<property name="packager" ref="standardPackager"/>
		<property name="transport" ref="activeMqTransport"></property>
	</bean>

	<bean id="standardPackager"
		class="org.essentialplatform.runtime.client.remoting.packaging.standard.StandardPackager">
	</bean>
	
	<bean id="xstreamMarshalling"
		class="org.essentialplatform.runtime.shared.remoting.marshalling.xstream.XStreamMarshalling"/>
	
	<bean id="activeMqTransport"
		class="org.essentialplatform.runtime.client.remoting.transport.activemq.ActiveMqTransport">
		<property name="brokerUrl" value="tcp://localhost:61616"/>
		<property name="destinationName" value="org.essentialplatform.test"/>
	</bean>

	<!--  overridden by domain plugin -->
	<bean id="domain" 
		class="org.essentialplatform.runtime.shared.domain.SpringConfiguredDomainDefinition">
		<property name="domainBuilder">
			<description>
				The programming model conventions under which the domain classes
				were written.
			</description>
			<ref bean="primaryBuilder"/>
		</property>
	</bean>

	<!--  overridden by domain plugin -->
	<bean id="louis" 
		class="org.essentialplatform.louis.domain.SpringConfiguredLouisDefinition">
		<description>
			Application programmer must supply a 'louis' bean, implementing ILouisDefinition.  
			It optionally configures the UI with specific capabilities for the domain.
		</description>
		<property name="domainDefinition" ref='domain'>
			<description>
				The domain to which these UI-specific capabilities refer.  The
				domain should be defined in 'spring-context-domain.xml', which
				will also be included in the context.
			</description>
		</property>
		<property name="secondaryBuilders">
			<description>
				Processing of any additional annotations specific to Louis.
			</description>
			<list>
				<ref local="louisProgModelRuntimeBuilder"/>
			</list>
		</property>
	</bean>

	
	<!-- potentially overridden by domain plugin (rare) -->
	<bean id="primaryBuilder" 
		class="org.essentialplatform.progmodel.essential.runtime.EssentialProgModelRuntimeBuilder">
		<description>
			Default definition of 'primaryBuilder', representing the programming
			model conventions under which the domain classes have been written.
			The domain plugin could in theory redefine this bean, though this
			will be rare.
		</description>
	</bean>

	<!-- potentially overridden by domain plugin (rare) -->
	<bean id="louisProgModelRuntimeBuilder" 
		class="org.essentialplatform.progmodel.louis.runtime.LouisProgModelRuntimeBuilder"/>



</beans>
